// Circular array

public class CircularArray<T> implements Iterable<T>{
  private T[] data;
  private index;
  
  public CircularArray(int size){
    this.data = (new T[]) new Object[size];
    this.index = 0;
  }
  
  public int convert(int x){
    if(x<0)
      x += data.length;
    return (index + x) % data.length;
  }
  
  public void rotate(int x){
    index = convert(x);
  }
  
  public T get(int x){
    if(x<0 || x>= data.length)
      return new IndexOutOfBoundsException();
    return data[convert(x)];
  }
  
  public void set(int x, T val){
    data[convert(x)] = val;
  }
  
  public Iterator<T> iterator(){
    return new CircularArrayIterator<T>(this);
  }
}

public class CircularArrayIterator<TI> implements Iterator<TI> {
  private TI[] _data;
  private int _current = -1;
  
  public CircularArrayIterator(CircularArray data) {
    _data = data;
  }
  
  public boolean hasNext()
  {
    return _current < _data.length - 1;
  }
  
  public TI next() {
    _current++;
    return _data[convert(_current)];
  }
  
  public void remove(){
    return new UnsupportedOperationException();
  }
}
