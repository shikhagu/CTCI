
// Fixed division

[0, n/3)
[n/3, 2n/3)
[2n/3, n)

stackNum -> 0,1,2

public class MultiStack<T>{
  public T[] data;
  public int[] length = new int[3];
  
  public MultiStack(int arraySize){
    this.data = (new T[]) new Object[arraySize];
    length = {0, 0, 0};
  }
  
  public int getTop(stackNum){
    int offset = ((stackNum) * data.length)/ 3;
    return offset + length[stackNum] - 1;
  }
  
  public T pop(int stackNum){
    // Empty stack
    if(length[stackNum] == 0)
      throw new StackEmptyException();
    
    // Remove top element
    int top = getTop(stackNum);
    T item = data[top];
    data[top] = null;
    length[stackNum-1]--;
    return item;
  }
  
  public T peek(int stackNum){
    // Empty stack
    if(length[stackNum] == 0)
      throw new StackEmptyException();
    
    return data[getTop(stackNum)];
  }
  
  public void push(int stackNum, T item){
    int length = length[stackNum];
    
    // Full stack
    if(length == data.length/3)
      throw StackFullException();
    
    // Add element
    length[stackNum] = length + 1;
    data[getTop(stackNum)] = item;
  }
  
  public boolean isEmpty(int stackNum){
    return length[stackNum] == 0;
  }
}
