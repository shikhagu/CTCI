// Set of stacks

public class SetOfStacks<T> extends Stack<T>{
  private int capacity; // used at stack level
  private int capacityThreshold;  // used at set level
  private ArrayList<Stack<T>> set;
  
  public SetOfStacks(int capacityThreshold){
    set = new ArrayList<Stack<T>>();
    this.capacityThreshold = capacityThreshold;
  }
  
  public Stack<T> currentStack(){
    if(set.size() == 0)
      return null;
    return set.get(set.size()-1));
  }
  
  public T peek(){
    Stack<T> currentStack = currentStack();
    
    if(currentStack == null)
      throw new EmptyStackException();
      
    return currentStack.peek();
  }
  
  public T pop(){
    Stack<T> currentStack = currentStack();
    
    // Empty stack
    if(currentStack == null)
      throw new EmptyStackException();
      
    // Pop
    T item = currentStack.pop();
    
    // Reduce capacity or remove stack
    int currentCapacity = currentStack.getCapacity() - 1;
    if(currentCapacity == 0){
      set.remove(set.size()-1);
    }
    else{
      currentStack.setCapacity(currentCapacity);
    }
    
    return item;
  }
  
  public void push(T item){
    Stack<T> currentStack = currentStack();
    
    // Create a new stack
    if(currentStack == null || currentStack.capacity == capacityThreshold){
      Stack<T> stack = new Stack<T>();
      stack.push(item);
      set.add(stack);
    }
    // Push to current stack
    else {
      currentStack.push(item);
      currentStack.setCapacity(currentStack.getCapacity() - 1);
    }
  }
}
