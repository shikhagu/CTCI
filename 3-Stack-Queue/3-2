// Tracking local minimum in every node

public class StackWithMin extends Stack<NodeWithMin>{
  
  public class NodeWithMin{
    private int data;
    private NodeWithMin next;
    private int min;
    
    public NodeWithMin(int data, int min){
      this.data = data;
      this.min = min;
    }
  }
  
  public void push(int item){
    int min = Math.min(item, min());
    super.push(new NodeWithMin(item, min));
  }
  
  private int min(int item){
    if(this.isEmpty())
      return Integer.MAX_VALUE;
    return peek().min;
  }
}


// Tracking a stack of min

public class StackWithMin extends Stack<Integer>{
  private Stack<Integer> minStack;
  
  public StackWithMin(){
    minStack = new Stack<Integer>();
  }
  
  public void push(Integer data){
    StackNode<Integer> node = new StackNode<Integer>(data);
    if(data <= min())
      minStack.push(data);
    super.push(data);
  }

  public Integer pop(){
    Integer data = super.pop();
    if(data == min())
      minStack.pop();
    return data;
  }
  
  public Integer min(){
    if(minStack.isEmpty())
      return Integer.MAX_VALUE;
    return minStack.peek();
  }
}
