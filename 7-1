// Data Model
public enum Suit{
  CLUB, HEART, SPADE, DIAMOND;
  // methods to set get suit on value, or value on suit
}
public abstract class Card {         // immutable
  private Suit suit;
  private int value;
  private boolean isAvailable;
  public Card(Suit suit, int value){ //default constructor
    this.shape = shape;
    this.value = value;
  }
  private Card(){ // eliminating
  }
  // available related methods
}
-------------------------------
public class Deck<T extends Card>{
  private ArrayList<T> cards;
  public CardDeck(ArrayList<T> cards){
    // set cards
  }
  public void shuffleCards();
  public T[] dealCards();
  public T dealCard(); // get the top card on the table
}

public class Hand<T extends Card>{
  private ArrayList<T> cards;
  public Hand(ArrayList<T> cards){
    // set cards
  }
  public void addCards();
}

-----------------------------
public class BlackJackCard extends Card{
//value
}
public class Deck<BlackJackCard>{
// deck config
}
public class Hand<BlackJackCard>{
// score
}

-------------------------------
-------------------------------
public class CardGame{
  private ArrayList<CardDeck> cardDecks;
  private ArrayList<Card> cardsOnTable;
  private ArrayList<Player> players;
  private Player winner;
  private Player dealer;
  public void removePlayer(Player player);
  public void addPlayer(Player player); 
  
}
-------------------------------
public class Player{
  private ArrayList<Card> cards;
  public void addCard(Card card)
  public void removeCard(Card card);
}
-------------------------------
public class BlackJack extends CardGame{
  public BlackJack()
  {
    // Set card decks
    // Set game value for all cards
    // Set players
    // set dealer
  }
  public void dealCards();  // updates cards on table
  public void checkWinner(Player player);
  public void getScore(Player player)
  public void endGame()
  {// check winner
  // check scores of all player
  // stores in persistent storage if required
  // cleans up
  }
}
